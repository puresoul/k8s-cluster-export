#!/bin/bash -x
# 
# k8s-cluster-export
# Modified:  2019-10-31
# purpose:   move kubernetes resources to an other cluster
#            (and if requested import to an other namespace)
# 
# Modified by Michael Zervakis m.zervakis@infinitum.gr
#
# forked from https://github.com/tmattausch/k8s-cluster-export
# author:    Thomas Mattausch (thomas@mattausch.org) 

set -e
set -o errtrace     # Inherit ERR trap from shell functions
#set -x

function errtrap {
   echo $?
   RED='\033[0;31m'
   echo -e "\n\n\n${RED} ---- ERROR: unexpected termination! ----\n"
   exit 1
}

trap errtrap ERR

available_resources=(
  pvc
  sts
  deploy
  svc
  cm
  ing
  secrets
  limits
  quota
  roles         # rbac.authorization.k8s.io
  rolebindings  # rbac.authorization.k8s.io
  job
  # ds
  # cj
  # netpol
)

available_cluster_resources=(
  sc        # storage.k8s.io  StorageClass
  pv        # storage.k8s.io  Persistent Volumes
  psp       # policy          PodSecurityPolicy
  clusterroles          # rbac.authorization.k8s.io
  clusterrolebindings   # rbac.authorization.k8s.io
)

display_help() {
echo "
USAGE: k8s-export.sh {-n namespace [-c new-namespace] | -g} [-h] [-k kubeconfig] [-r resource-1] [-r resource-2] [-i inputfile (e.g. deploy)] [-i pvc]

description     This script will export kubernetes resource configs the exported resources can be 
                limited with -r to a specefic resource type (e.g. -r pvc -r sv).

                And can be limited with -i to a subset of resources in that namespace.

                parameter:
                -n:   set source to namespace
                -g:   set source to cluster 
                -r:   limit resources to specified types (can be repeated multiple times) 
                -i:   limit exported resources to input file (new line serparted)
                      the input file must match the name of the resource (can be repeated multiple times)
                -c:   change namespace to specified value
                -k:   path to kubectl kubeconfig file
                By not setting -r all resources will be exported.

Supported Namespaced Resources:
"
printf '%s\n' "${available_resources[@]}"
echo "
Supported Cluster Resources:
"
printf '%s\n' "${available_cluster_resources[@]}"
}

while getopts ':n:r:i:c:k:gh' opt; do
    case "$opt" in
        r) manual_resource+=("$OPTARG") ;;
        n) if [ -n "$CLUSTER" ]; then
             echo 'Option -g cannot be used with option -n' >&2
             exit 1
           else
             NAMESPACE=$OPTARG
           fi
           ;;
        c) NEW_NAMESPACE=$OPTARG;;
        i) target_files+=("$OPTARG");;
        g) if [ -n "$NAMESPACE" ]; then
             echo 'Option -g cannot be used with option -n' >&2
             exit 1
           else
             CLUSTER=1
           fi             
           ;;
        k) if [ ! -f $OPTARG ]; then
             echo "Kube Config File $OPTARG not found" >&2
             exit 1
           else
             KUBECONFIG=$OPTARG
           fi
           ;;
        h) display_help
           exit 0 ;;
        *) echo 'error in command line parsing' >&2
           exit 1
           ;;
        :) echo "Option $OPTARG requires an argument." >&2
           exit 1
           ;;
    esac
done

objectmeta_v1=(
  "metadata.annotations.\"kubectl.kubernetes.io/last-applied-configuration\""
  "metadata.creationTimestamp"
  "metadata.selfLink"
  "metadata.resourceVersion"
  "metadata.uid"
)

function main {
  set_env
  check_prerequisites

  # check if limit resources parameter is set
  # otherwise export all available resources
  if [ -n "$manual_resource" ]; then
    check_manual_resource
    export_config "${manual_resource[@]}"
    exit 0
  elif [ -n "$CLUSTER" ]; then
    export_config "${available_cluster_resources[@]}"
    exit 0
  else
    export_config "${available_resources[@]}"
    exit 0
  fi
}

function export_config {
  export_resources=("$@")
  [ $TERM != "dumb" ] && echo -e "\n${BLUE}⎈ ⎈ ☃ ⎈ ⎈\n${NC}"
  status_output "start export resources for ns $NAMESPACE" "step"

  if [ -n "$NAMESPACE" ]; then
    mkdir -p $SOURCE/$NAMESPACE
  else
    mkdir -p $SOURCE/CLUSTER
  fi
  
  for r in "${export_resources[@]}"; do
    $r
  done
}

function set_env {
  pv_target=()
  SOURCE="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
  if [ $TERM != "dumb" ]; then
    BLUE='\033[1;34m'
    GREEN='\033[1;32m'
    RED='\033[0;31m'
    YELLOW='\033[1;33m'
    NC='\033[0m' # No Color
    BOLD=$(tput bold)
    NORMAL=$(tput sgr0)
  fi
}

function status_output {
  echo -e ""
  if [ $2 == "ok" ]; then
    echo -e "${BLUE}-------------- $1 --------------${NC}"
  elif [ $2 == "warn" ]; then
    echo -e "${YELLOW}-------------- $1 --------------${NC}"
  elif [ $2 == "error" ]; then
    echo -e "${RED}ERROR: $1${NC}"
  elif [ $2 == "step" ]; then
    echo -e "${BOLD}---- $1 ----${NORMAL}"
  else
    echo -e "${RED}ERROR in status_output$1${NC}"
    exit 1
  fi
  echo -e ""
}

function check_prerequisites {
  #check kubectl installation
  if [ ! -x "$(command -v kubectl)" ]; then
    status_output "kubectl is not instaled" "error"
    exit 1
  fi
  
  ## Set Kubectl Config
  if [ -n "$KUBECONFIG" ]; then
     KUBECTL="kubectl --kubeconfig=$KUBECONFIG"
  else
     KUBECTL="kubectl"
  fi

  #check if namespace parameter is set
  if [ -z "$NAMESPACE" ] && [ -z "$CLUSTER" ]; then
    status_output "namespace not set (-n)" "error"
    display_help
    exit 1
  fi

  #check if namespace exists
  if ${KUBECTL} get ns $NAMESPACE; then
    :
  else
    status_output "namespace not valid ($NAMESPACE)" "error"
    exit 1
  fi

  if [ ! -x "$(command -v yq)" ] ; then
    status_output "yq is not instaled. Please install" "error"
    exit 1
  fi
}

function check_manual_resource {
  #check if the resource is available
  if [ $CLUSTER -eq 1 ]; then
    check_resources=(${available_cluster_resources[@]})
  else
    check_resources=(${available_resources[@]})
  fi
  for r in ${manual_resource[@]}; do
    if [[ " ${check_resources[@]} " =~ " $r " ]]; then
      :
    else
      status_output "resource type $r not configured" "error"
      status_output "supported functions:" "step"
      printf '%s\n' "${check_resources[@]}"
      exit 1
    fi
  done
  unset check_resources
}

function show_diff {
  status_output "changes" "warn"
  if [ -x "$(command -v colordiff)" ] && [ -n $TERM ]; then
    colordiff -y --suppress-common-lines $RAW $RESULT || true
  else
    diff --color=never -y $RAW $RESULT || true
  fi
}

function remove_yaml_value {
  arr=("$@")
  for i in "${arr[@]}"; do
    yq -iy "del(.$i)" $RESULT 
  done
}

function change_namespace {
  if [ -n "$NEW_N5AMESPACE" ]; then
    if [ $TYPE == "pv" ]; then
      yq -iy ".spec.claimRef.namespace=$NEW_NAMESPACE" $RESULT 
    else
      yq -iy ".metadata.namespace=$NEW_NAMESPACE" $RESULT 
    fi
  fi
}

function set_targets {
  if [ "$1" = "pv" ] && [ -n "$NAMESPACE" ]; then
    # only export PVs for correspoinding PVCs
    targets=(${pv_targets[@]})
  elif [[ " ${target_files[@]} " =~ "$1" ]]; then
    targets=()
    while IFS= read -r line; do
      targets+=($line)
    done <$1
  elif [ -n "$NAMESPACE" ]; then
    targets=($(${KUBECTL} get $1 -n ${NAMESPACE} --no-headers -o=custom-columns=NAME:.metadata.name | tr -d \"))
  else
    targets=($(${KUBECTL} get $1 --no-headers -o=custom-columns=NAME:.metadata.name | tr -d \"))
  fi
}


function remove_status {
  # reset status
  if [[ " (pvc deploy quota limits job) " =~ " $TYPE " ]]; then
    yq -iy 'del(.status)' $RESULT ; echo 'status: {}' >> $RESULT
  elif [ $TYPE == "sts" ]; then
    yq -iy 'del(.status)' $RESULT ; echo -e 'status:\n  replicas: 0' >> $RESULT
  elif [ $TYPE == "svc" ] || [ $TYPE == "ing" ]; then
    yq -iy 'del(.status)' $RESULT ; echo -e 'status:\n  loadBalancer: {}' >> $RESULT
  fi
}

function export_resource {
  status_output "export $1" "ok"
  TYPE="$1"
  set_targets "$TYPE"
  
  if [ -n "$NAMESPACE" ]; then
    kubectl_namespace="-n ${NAMESPACE}"
    mkdir -p $SOURCE/$NAMESPACE/$2_$1
    TARGET_FOLDER="$SOURCE/$NAMESPACE/$2_$1"
  else
    mkdir -p $SOURCE/CLUSTER/$2_$1
    TARGET_FOLDER="$SOURCE/CLUSTER/$2_$1"
  fi

  printf "%s \n" ${targets[@]}

  for i in "${targets[@]}"; do
    RAW=$TARGET_FOLDER'/'$TYPE'_'$i'_raw.yaml'
    RESULT=$TARGET_FOLDER'/'$TYPE'_'$i'.yaml'
    status_output "export $i config" "step"
    # skip default token secret in export
    if [[ $i =~ ^default-token-[0-9a-z]{5} ]] && [ ${TYPE} = "secrets" ]; then
      status_output "skip secret: $i" "step"
    elif [ -z "$i" ] || [ $i == "null" ]; then
      status_output "no value set skip export for $TYPE $i" "warn"
    else
      # export resource and adjust the output
      ${KUBECTL} get $TYPE $i -o yaml ${kubectl_namespace} > $RAW
      cp $RAW $RESULT
      remove_yaml_value "${remove[@]}"
      # only export PVs for correspoinding PVCs
      if [ "$1" = "pvc" ]; then
        pv_targets+=($(yq '.spec.volumeName' $RESULT | tr -d \"))
      # change generation to 1 for sts
      elif [ "$1" = "sts" ]; then
        yq -iy '.metadata.generation=1' $RESULT 
      fi
      change_namespace
      remove_status
      show_diff
      rm -f $RAW
    fi
  done
}

function pvc {
  # get persistent volume claims
  remove=(
    "metadata.annotations.\"pv.kubernetes.io/bind-completed\""
    ${objectmeta_v1[@]}
  )
  export_resource "pvc" "01" "${remove[@]}"

  # get corresponding persistent volumes
  remove=(
    "metadata.annotations.\"kubernetes.io/createdby\""
    "metadata.annotations.\"pv.kubernetes.io/bound-by-controller\""
    ${objectmeta_v1[@]}
    "spec.claimRef.uid"
    "spec.claimRef.resourceVersion"
  )
  export_resource "pv" "02" "${remove[@]}"
}

function cm {
  #get configmaps
  remove=(
    ${objectmeta_v1[@]}
  )
  export_resource "cm" "03" "${remove[@]}"
}
 
function secrets {
  remove=(
    ${objectmeta_v1[@]}
  )
  export_resource "secrets" "04" "${remove[@]}"
}

function deploy {
  #get deployments
  remove=(
    ${objectmeta_v1[@]}
  )
  export_resource "deploy" "05" "${remove[@]}"
}

function sts {
  #get statefulsets 
  remove=(
    ${objectmeta_v1[@]}
  )
  export_resource "sts" "06" "${remove[@]}"
}

function svc {
  #get services
  remove=(
    ${objectmeta_v1[@]}
    "spec.clusterIP"
#    "spec.ports.nodePort"
  )
  export_resource "svc" "07" "${remove[@]}"
}

function ing {
  #get ingress
  remove=(
    ${objectmeta_v1[@]}
  )
  export_resource "ing" "08" "${remove[@]}"
}

function limits {
  #get limitrange
  remove=(
    ${objectmeta_v1[@]}
  )
  export_resource "limits" "09" "${remove[@]}"
}

function quota {
  #get resourcequotas
  remove=(
    ${objectmeta_v1[@]}
  )
  export_resource "quota" "10" "${remove[@]}"
}

function roles {
  #get roles
  remove=(
    ${objectmeta_v1[@]}
  )
  export_resource "roles" "11" "${remove[@]}"
}

function rolebindings {
  #get rolebindings
  remove=(
    ${objectmeta_v1[@]}
  )
  export_resource "rolebindings" "12" "${remove[@]}"
}

function job {
  #get jobs
  remove=(
    ${objectmeta_v1[@]}
  )
  export_resource "job" "13" "${remove[@]}"
}

function psp {
  #get podsecuritypolicy
  remove=(
    ${objectmeta_v1[@]}
  )
  export_resource "psp" "01" "${remove[@]}"
}

function sc {
  #get storageclass
  remove=(
    ${objectmeta_v1[@]}
  )
  export_resource "sc" "02" "${remove[@]}"
}

function pv {
  #get persistentvolume
  remove=(
    "metadata.annotations.\"kubernetes.io/createdby\""
    "metadata.annotations.\"pv.kubernetes.io/bound-by-controller\""
    ${objectmeta_v1[@]}
    "spec.claimRef"
  )
  export_resource "pv" "03" "${remove[@]}"
}

function clusterroles {
  #get clusterroles
  remove=(
    ${objectmeta_v1[@]}
  )
  export_resource "clusterroles" "04" "${remove[@]}"
}

function clusterrolebindings {
  #get clusterroles
  remove=(
    ${objectmeta_v1[@]}
  )
  export_resource "clusterrolebindings" "05" "${remove[@]}"
}

main